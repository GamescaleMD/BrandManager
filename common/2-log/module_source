
# Log functions
# Copyrights Amnon Nessim, Flowsoft LTD. (2007-2012) amnon@flowsoft.co.il

# Log settings:
# LOGLEVEL: DEBUG,INFO,WARN,ERROR,FATAL
# LOGTIMESTAMP
# This is the default log level:
LOGLEVEL=2
LOGTIMESTAMP=Y
LOGCOLOR=Y
LOGEXITONERROR=Y

log_internal() {
	# First argument can be the LOGLEVEL
	# Second argument can be -e - if it's set, then the preceding command
	# will be executed
	# If not, the rest will be logged
	if [ $# -lt 1 ]; then
		return
	fi
	RES=0
	get_level_number "$1"
	LEVEL=$?
	if [ $LEVEL -gt 0 ]; then
		shift
	fi
	if [ $LEVEL -lt 1 ]; then
		# Default level is info
		LEVEL=2
	fi
	EXECCMD=0
	if [ "$1" == "-e" ]; then
		EXECCMD=1
		shift
	fi
	# Check if we need to log
	if [ $LEVEL -lt $LOGLEVEL ]; then
		# We don't need to log
		# This is for debug:
		# echo No need to log: $@
		if [ $EXECCMD -eq 1 ]; then
			CMD=`echo $@`
			$CMD > /dev/null 2>&1
			return $?
		fi
		return 0
	fi
	if [ "$LOGTIMESTAMP" == "Y" ]; then
		echo -n "`date` - "
	fi
	if [ $LEVEL -gt 0 ]; then
		print_loglevel $LEVEL
		echo -n " - "
	fi

	if [ $EXECCMD -eq 1 ]; then
		CMD=`echo $@`
		echo Executing \"$CMD\"
		$CMD
		RES=$?
	else
		echo "$@"
	fi
	if [ $LEVEL -gt 3 -a $LOGEXITONERROR == "Y" ]; then
		echo Error encountered, terminating script
		exit 1
	fi
	return $RES
}
export -f log_internal

USAGE="$USAGE

Function   : set_timestamp
Description: Controls if the log function will display the timestamp 
             at each log entry
Arguments  : 1 - Y or N
Returns    : 0 on success, error code otherwise
"

set_timestamp() {
	if [ $# -ne 1 ]; then
		echo ERROR: Wrong call to set_timestamp!
		return 1
	fi
	if [ "$1" == "Y" ]; then
		export LOGTIMESTAMP=Y
	else
		if [ "$1" == "N" ]; then
                	export LOGTIMESTAMP=N
        	else
			echo ERROR: Wrong parameter to set_timestamp, please use Y/N
		fi
	fi
}
export -f set_timestamp

USAGE="$USAGE

Function   : set_logcolor
Description: Controls if ANSI color is used for log display
Arguments  : 1 - Y/N
Returns    : 0 on success, error code otherwise
"

set_logcolor() {
	if [ $# -ne 1 ]; then
		echo ERROR: Wrong call to set_logcolor!
		return 1
	fi
	if [ "$1" == "Y" ]; then
		export LOGCOLOR=Y
	else
		if [ "$1" == "N" ]; then
                	export LOGCOLOR=N
        	else
			echo ERROR: Wrong parameter to set_log_color, please use Y/N
		fi
	fi
}
export -f set_logcolor

USAGE="$USAGE

Function   : set_loglevel
Description: Sets which log level will display. Any log requests that are below
             this log level will be ignored.
Arguments  : 1 - The log level to display from, valid options:
             DEBUG/INFO/WARN/ERROR/FATAL
Returns    : 0 on success, error code otherwise
"

set_loglevel() {
	if [ $# -ne 1 ]; then
		echo ERROR: Wrong call to set_loglevel!
		return 1
	fi
	get_level_number $1
	TESTLOG=$?
	if [ $TESTLOG -gt 0 ]; then
		export LOGLEVEL=$TESTLOG
	else
		echo ERROR: Wrong parameter to set_loglevel - $1!
	fi
}
export -f set_loglevel

USAGE="$USAGE

Function   : print_loglevel
Description: Prints to the screen the current log level setting
Arguments  : none
Returns    : 0 on success, error code otherwise
"

print_loglevel() {
	if [ $# -eq 1 ]; then
		TEMPLEVEL=$1
	else
		TEMPLEVEL=$LOGLEVEL
	fi
	print_loglevel_color $TEMPLEVEL
	case $TEMPLEVEL in
	1) echo -n  "DEBUG "
		;;
	2)  echo -n "INFO  "
		;;
	3)  echo -n "WARN  "
		;;
	4) echo -n  "ERROR "
		;;
	5) echo -n  "FATAL "
		;;
	*) echo -n  "UNKOWN"
		;;
	esac
	if [ "$LOGCOLOR" == "Y" -a "$COMMONLOGFILE" == "" ]; then
		printf '\033[0m'
	fi
}
print_loglevel_color() {
	if [ "$LOGCOLOR" != "Y" -o "$COMMONLOGFILE" != "" ]; then
		return 0
	fi
	if [ $# -eq 1 ]; then
		TEMPLEVEL=$1
	else
		TEMPLEVEL=$LOGLEVEL
	fi
	case $TEMPLEVEL in
	1) printf '\033[1;37;40m'
		;;
	2)  printf '\033[1;32;40m'
		;;
	3)  printf '\033[1;33;40m'
		;;
	4) printf '\033[1;31;40m'
		;;
	5) printf '\033[1;37;41m'
		;;
	*) printf '\033[1;34;40m'
		;;
	esac

}
export -f print_loglevel


get_level_number() {
	if [ $# -ne 1 ]; then
		echo ERROR: Wrong call to get_level_number!
		return 1
	fi
	TEMPLOG=`echo $1 | tr '[a-z]' '[A-Z]'`
	case $TEMPLOG in
	DEBUG) return 1
		;;
	INFO)  return 2
		;;
	WARN)  return 3
		;;
	ERROR) return 4
		;;
	FATAL) return 5
		;;
	*) return 0
		;;
	esac
}
export -f get_level_number


USAGE="$USAGE

Function   : log
Description: Logs a message
Arguments  : - (Optional) - The log level (DEBUG/INFO/WARN/ERROR/FATAL)
             - (Optional) - -e - will execute the preceding command and 
                                 log the output
             - Rest of arguments - The message to display/command to run
Returns    : 0 on success, error code otherwise
Examples   : log This is a test
             log ERROR This is an error
             log INFO -e uname -a
"

log() {
	if [ "$COMMONLOGFILE" != "" -a ! -w "$COMMONLOGFILE" ]; then
		echo ERROR: Could not write to log file $COMMONLOGFILE!
		return 1
	fi
	if  [ "$COMMONLOGFILE" != "" ]; then
		log_internal $@ >> $COMMONLOGFILE 2>&1
		RES=$?
	else
		log_internal $@
		RES=$?
	fi
	return $RES
}
export -f  log

USAGE="$USAGE

Function   : set_logfile
Description: Sets the file to which to log. If specified, log will be written
             to this file instead of to the screen
Arguments  : File to write to
Returns    : 0 on success, error code otherwise
"

set_logfile() {
	if [ $# -ne 1 ]; then
		echo ERROR: Wrong call to set_logfile!
		return 1
	fi
	if [ ! -e "$1" ]; then
		touch $1
		if [ $? -ne 0 ]; then
			echo Could not create log file $1!
			return 3
		fi
	fi
        if [ ! -w "$1" ]; then
                echo ERROR: Could not write to log file $1!
                return 2
        fi
	COMMONLOGFILE=$1
	return 0
	
}
export -f set_logfile

